// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	repository "gitlab.com/renodesper/gokit-microservices/repository"

	time "time"

	uuid "github.com/google/uuid"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, userPayload
func (_m *UserRepository) CreateUser(ctx context.Context, userPayload *repository.User) (*repository.User, error) {
	ret := _m.Called(ctx, userPayload)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, *repository.User) *repository.User); ok {
		r0 = rf(ctx, userPayload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repository.User) error); ok {
		r1 = rf(ctx, userPayload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *UserRepository) DeleteUser(ctx context.Context, userID uuid.UUID) (*repository.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *repository.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields: ctx, sortBy, sort, skip, limit
func (_m *UserRepository) GetAllUsers(ctx context.Context, sortBy string, sort string, skip int, limit int) ([]repository.User, error) {
	ret := _m.Called(ctx, sortBy, sort, skip, limit)

	var r0 []repository.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) []repository.User); ok {
		r0 = rf(ctx, sortBy, sort, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = rf(ctx, sortBy, sort, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email, opts
func (_m *UserRepository) GetUserByEmail(ctx context.Context, email string, opts repository.UserOptions) (*repository.User, error) {
	ret := _m.Called(ctx, email, opts)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, string, repository.UserOptions) *repository.User); ok {
		r0 = rf(ctx, email, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, repository.UserOptions) error); ok {
		r1 = rf(ctx, email, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmailPassword provides a mock function with given fields: ctx, email, password, opts
func (_m *UserRepository) GetUserByEmailPassword(ctx context.Context, email string, password string, opts repository.UserOptions) (*repository.User, error) {
	ret := _m.Called(ctx, email, password, opts)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, repository.UserOptions) *repository.User); ok {
		r0 = rf(ctx, email, password, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, repository.UserOptions) error); ok {
		r1 = rf(ctx, email, password, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, userID, opts
func (_m *UserRepository) GetUserByID(ctx context.Context, userID uuid.UUID, opts repository.UserOptions) (*repository.User, error) {
	ret := _m.Called(ctx, userID, opts)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repository.UserOptions) *repository.User); ok {
		r0 = rf(ctx, userID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, repository.UserOptions) error); ok {
		r1 = rf(ctx, userID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username, opts
func (_m *UserRepository) GetUserByUsername(ctx context.Context, username string, opts repository.UserOptions) (*repository.User, error) {
	ret := _m.Called(ctx, username, opts)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, string, repository.UserOptions) *repository.User); ok {
		r0 = rf(ctx, username, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, repository.UserOptions) error); ok {
		r1 = rf(ctx, username, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAccessToken provides a mock function with given fields: ctx, userID, accessToken, refreshToken, expiredAt
func (_m *UserRepository) SetAccessToken(ctx context.Context, userID uuid.UUID, accessToken string, refreshToken string, expiredAt time.Time) (*repository.User, error) {
	ret := _m.Called(ctx, userID, accessToken, refreshToken, expiredAt)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, time.Time) *repository.User); ok {
		r0 = rf(ctx, userID, accessToken, refreshToken, expiredAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, time.Time) error); ok {
		r1 = rf(ctx, userID, accessToken, refreshToken, expiredAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPassword provides a mock function with given fields: ctx, userID, password
func (_m *UserRepository) SetPassword(ctx context.Context, userID uuid.UUID, password string) (*repository.User, error) {
	ret := _m.Called(ctx, userID, password)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *repository.User); ok {
		r0 = rf(ctx, userID, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userID, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserExpiry provides a mock function with given fields: ctx, userID, expiredAt
func (_m *UserRepository) SetUserExpiry(ctx context.Context, userID uuid.UUID, expiredAt time.Time) (*repository.User, error) {
	ret := _m.Called(ctx, userID, expiredAt)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *repository.User); ok {
		r0 = rf(ctx, userID, expiredAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, userID, expiredAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserRole provides a mock function with given fields: ctx, userID, isAdmin
func (_m *UserRepository) SetUserRole(ctx context.Context, userID uuid.UUID, isAdmin bool) (*repository.User, error) {
	ret := _m.Called(ctx, userID, isAdmin)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) *repository.User); ok {
		r0 = rf(ctx, userID, isAdmin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = rf(ctx, userID, isAdmin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserStatus provides a mock function with given fields: ctx, userID, isActive
func (_m *UserRepository) SetUserStatus(ctx context.Context, userID uuid.UUID, isActive bool) (*repository.User, error) {
	ret := _m.Called(ctx, userID, isActive)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) *repository.User); ok {
		r0 = rf(ctx, userID, isActive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = rf(ctx, userID, isActive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, userID, userPayload
func (_m *UserRepository) UpdateUser(ctx context.Context, userID uuid.UUID, userPayload map[string]interface{}) (*repository.User, error) {
	ret := _m.Called(ctx, userID, userPayload)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, map[string]interface{}) *repository.User); ok {
		r0 = rf(ctx, userID, userPayload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, map[string]interface{}) error); ok {
		r1 = rf(ctx, userID, userPayload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
