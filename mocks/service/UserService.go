// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	repository "gitlab.com/renodesper/gokit-microservices/repository"

	service "gitlab.com/renodesper/gokit-microservices/service"

	time "time"

	uuid "github.com/google/uuid"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, payload
func (_m *UserService) CreateUser(ctx context.Context, payload *service.CreateUserRequest) (*repository.User, error) {
	ret := _m.Called(ctx, payload)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateUserRequest) *repository.User); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.CreateUserRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *UserService) DeleteUser(ctx context.Context, userID uuid.UUID) (*repository.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *repository.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields: ctx, sortBy, sort, skip, limit
func (_m *UserService) GetAllUsers(ctx context.Context, sortBy string, sort string, skip int, limit int) ([]repository.User, error) {
	ret := _m.Called(ctx, sortBy, sort, skip, limit)

	var r0 []repository.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) []repository.User); ok {
		r0 = rf(ctx, sortBy, sort, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = rf(ctx, sortBy, sort, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *UserService) GetUser(ctx context.Context, userID uuid.UUID) (*repository.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *repository.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAccessToken provides a mock function with given fields: ctx, userID, accessToken, refreshToken, expiredAt
func (_m *UserService) SetAccessToken(ctx context.Context, userID uuid.UUID, accessToken string, refreshToken string, expiredAt time.Time) (*repository.User, error) {
	ret := _m.Called(ctx, userID, accessToken, refreshToken, expiredAt)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, time.Time) *repository.User); ok {
		r0 = rf(ctx, userID, accessToken, refreshToken, expiredAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, time.Time) error); ok {
		r1 = rf(ctx, userID, accessToken, refreshToken, expiredAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPassword provides a mock function with given fields: ctx, userID, password, verifyPassword
func (_m *UserService) SetPassword(ctx context.Context, userID uuid.UUID, password string, verifyPassword string) (*repository.User, error) {
	ret := _m.Called(ctx, userID, password, verifyPassword)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) *repository.User); ok {
		r0 = rf(ctx, userID, password, verifyPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, userID, password, verifyPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserExpiry provides a mock function with given fields: ctx, userID, expiredAt
func (_m *UserService) SetUserExpiry(ctx context.Context, userID uuid.UUID, expiredAt time.Time) (*repository.User, error) {
	ret := _m.Called(ctx, userID, expiredAt)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *repository.User); ok {
		r0 = rf(ctx, userID, expiredAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, userID, expiredAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserRole provides a mock function with given fields: ctx, userID, isAdmin
func (_m *UserService) SetUserRole(ctx context.Context, userID uuid.UUID, isAdmin bool) (*repository.User, error) {
	ret := _m.Called(ctx, userID, isAdmin)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) *repository.User); ok {
		r0 = rf(ctx, userID, isAdmin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = rf(ctx, userID, isAdmin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserStatus provides a mock function with given fields: ctx, userID, isActive
func (_m *UserService) SetUserStatus(ctx context.Context, userID uuid.UUID, isActive bool) (*repository.User, error) {
	ret := _m.Called(ctx, userID, isActive)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) *repository.User); ok {
		r0 = rf(ctx, userID, isActive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = rf(ctx, userID, isActive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, userID, payload
func (_m *UserService) UpdateUser(ctx context.Context, userID uuid.UUID, payload *service.UpdateUserRequest) (*repository.User, error) {
	ret := _m.Called(ctx, userID, payload)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *service.UpdateUserRequest) *repository.User); ok {
		r0 = rf(ctx, userID, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *service.UpdateUserRequest) error); ok {
		r1 = rf(ctx, userID, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
