// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	repository "gitlab.com/renodesper/gokit-microservices/repository"

	service "gitlab.com/renodesper/gokit-microservices/service"

	uuid "github.com/google/uuid"
)

// OauthService is an autogenerated mock type for the OauthService type
type OauthService struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *OauthService) Login(ctx context.Context, email string, password string) (*service.Token, error) {
	ret := _m.Called(ctx, email, password)

	var r0 *service.Token
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *service.Token); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, userID
func (_m *OauthService) Logout(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, username, email, passwd, isActive, isDeleted, isAdmin, createdFrom
func (_m *OauthService) Register(ctx context.Context, username string, email string, passwd string, isActive bool, isDeleted bool, isAdmin bool, createdFrom string) (*service.Token, error) {
	ret := _m.Called(ctx, username, email, passwd, isActive, isDeleted, isAdmin, createdFrom)

	var r0 *service.Token
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool, bool, string) *service.Token); ok {
		r0 = rf(ctx, username, email, passwd, isActive, isDeleted, isAdmin, createdFrom)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, bool, bool, bool, string) error); ok {
		r1 = rf(ctx, username, email, passwd, isActive, isDeleted, isAdmin, createdFrom)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestResetPassword provides a mock function with given fields: ctx, email
func (_m *OauthService) RequestResetPassword(ctx context.Context, email string) (*repository.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *repository.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *repository.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
