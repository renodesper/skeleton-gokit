// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "gitlab.com/renodesper/gokit-microservices/service"
)

// GoogleOauthService is an autogenerated mock type for the GoogleOauthService type
type GoogleOauthService struct {
	mock.Mock
}

// GetUserData provides a mock function with given fields: ctx, code
func (_m *GoogleOauthService) GetUserData(ctx context.Context, code string) (*service.GoogleUser, error) {
	ret := _m.Called(ctx, code)

	var r0 *service.GoogleUser
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.GoogleUser); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.GoogleUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OauthCallback provides a mock function with given fields: ctx, code
func (_m *GoogleOauthService) OauthCallback(ctx context.Context, code string) (*service.Token, error) {
	ret := _m.Called(ctx, code)

	var r0 *service.Token
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.Token); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
