// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	hermes "github.com/matcornic/hermes/v2"
	mock "github.com/stretchr/testify/mock"

	service "gitlab.com/renodesper/gokit-microservices/service"
)

// EmailService is an autogenerated mock type for the EmailService type
type EmailService struct {
	mock.Mock
}

// GenerateEmail provides a mock function with given fields: email, emailType, userID
func (_m *EmailService) GenerateEmail(email hermes.Email, emailType string, userID string) error {
	ret := _m.Called(email, emailType, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(hermes.Email, string, string) error); ok {
		r0 = rf(email, emailType, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Maintenance provides a mock function with given fields: userName
func (_m *EmailService) Maintenance(userName string) hermes.Email {
	ret := _m.Called(userName)

	var r0 hermes.Email
	if rf, ok := ret.Get(0).(func(string) hermes.Email); ok {
		r0 = rf(userName)
	} else {
		r0 = ret.Get(0).(hermes.Email)
	}

	return r0
}

// RequestResetPassword provides a mock function with given fields: userName, token
func (_m *EmailService) RequestResetPassword(userName string, token string) hermes.Email {
	ret := _m.Called(userName, token)

	var r0 hermes.Email
	if rf, ok := ret.Get(0).(func(string, string) hermes.Email); ok {
		r0 = rf(userName, token)
	} else {
		r0 = ret.Get(0).(hermes.Email)
	}

	return r0
}

// ResetPasswordNotification provides a mock function with given fields: userName
func (_m *EmailService) ResetPasswordNotification(userName string) hermes.Email {
	ret := _m.Called(userName)

	var r0 hermes.Email
	if rf, ok := ret.Get(0).(func(string) hermes.Email); ok {
		r0 = rf(userName)
	} else {
		r0 = ret.Get(0).(hermes.Email)
	}

	return r0
}

// Send provides a mock function with given fields: options, htmlBody, txtBody
func (_m *EmailService) Send(options service.SendOptions, htmlBody string, txtBody string) error {
	ret := _m.Called(options, htmlBody, txtBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(service.SendOptions, string, string) error); ok {
		r0 = rf(options, htmlBody, txtBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMail provides a mock function with given fields: userID, userEmail, subject, email, emailType
func (_m *EmailService) SendMail(userID string, userEmail string, subject string, email hermes.Email, emailType string) error {
	ret := _m.Called(userID, userEmail, subject, email, emailType)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, hermes.Email, string) error); ok {
		r0 = rf(userID, userEmail, subject, email, emailType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Welcome provides a mock function with given fields: userName, token
func (_m *EmailService) Welcome(userName string, token string) hermes.Email {
	ret := _m.Called(userName, token)

	var r0 hermes.Email
	if rf, ok := ret.Get(0).(func(string, string) hermes.Email); ok {
		r0 = rf(userName, token)
	} else {
		r0 = ret.Get(0).(hermes.Email)
	}

	return r0
}
