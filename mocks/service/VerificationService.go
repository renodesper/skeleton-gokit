// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	repository "gitlab.com/renodesper/gokit-microservices/repository"

	uuid "github.com/google/uuid"
)

// VerificationService is an autogenerated mock type for the VerificationService type
type VerificationService struct {
	mock.Mock
}

// VerifyRegistration provides a mock function with given fields: ctx, token
func (_m *VerificationService) VerifyRegistration(ctx context.Context, token string) (uuid.UUID, error) {
	ret := _m.Called(ctx, token)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyResetPassword provides a mock function with given fields: ctx, token, password, verifyPassword
func (_m *VerificationService) VerifyResetPassword(ctx context.Context, token string, password string, verifyPassword string) (uuid.UUID, error) {
	ret := _m.Called(ctx, token, password, verifyPassword)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) uuid.UUID); ok {
		r0 = rf(ctx, token, password, verifyPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, token, password, verifyPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: ctx, token, verification
func (_m *VerificationService) VerifyToken(ctx context.Context, token string, verification *repository.Verification) (uuid.UUID, error) {
	ret := _m.Called(ctx, token, verification)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, string, *repository.Verification) uuid.UUID); ok {
		r0 = rf(ctx, token, verification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *repository.Verification) error); ok {
		r1 = rf(ctx, token, verification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
